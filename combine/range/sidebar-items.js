initSidebarItems({"fn":[["range","``` # extern crate combine; # use combine::range::range; # use combine::*; # fn main() { let mut parser = range(\"hello\"); let result = parser.parse(\"hello world\"); assert_eq!(result, Ok((\"hello\", \" world\"))); let result = parser.parse(\"hel world\"); assert!(result.is_err()); # } ```"],["take","``` # extern crate combine; # use combine::range::take; # use combine::*; # fn main() { let mut parser = take(1); let result = parser.parse(\"1\"); assert_eq!(result, Ok((\"1\", \"\"))); let mut parser = take(4); let result = parser.parse(\"123abc\"); assert_eq!(result, Ok((\"123a\", \"bc\"))); let result = parser.parse(\"abc\"); assert!(result.is_err()); # } ```"],["take_while","``` # extern crate combine; # use combine::range::take_while; # use combine::*; # fn main() { let mut parser = take_while(|c: char| c.is_digit(10)); let result = parser.parse(\"123abc\"); assert_eq!(result, Ok((\"123\", \"abc\"))); let result = parser.parse(\"abc\"); assert_eq!(result, Ok((\"\", \"abc\"))); # } ```"],["take_while1","``` # extern crate combine; # use combine::range::take_while1; # use combine::*; # fn main() { let mut parser = take_while1(|c: char| c.is_digit(10)); let result = parser.parse(\"123abc\"); assert_eq!(result, Ok((\"123\", \"abc\"))); let result = parser.parse(\"abc\"); assert!(result.is_err()); # } ```"]],"struct":[["Range",""],["Take",""],["TakeWhile",""],["TakeWhile1",""]]});