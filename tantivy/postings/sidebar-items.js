initSidebarItems({"enum":[["SegmentPostingsOption","Object describing the amount of information required when reading a postings."],["SkipResult","Expresses the outcome of a call to `DocSet`'s `.skip_next(...)`."]],"struct":[["ChainedPostings","Creates a posting object that chains two postings together."],["FreqHandler","`FreqHandler`  is in charge of decompressing frequencies and/or positions."],["IntersectionDocSet","Creates a `DocSet` that iterator through the intersection of two `DocSet`s."],["NothingRecorder","Only records the doc ids"],["OffsetPostings","Wraps a posting object and offset all of the doc id with a given offset."],["PostingsSerializer","`PostingsSerializer` is in charge of serializing postings on disk, in the * `.idx` (inverted index) * `.pos` (positions file) * `.term` (term dictionary)"],["SegmentPostings","`SegmentPostings` represents the inverted list or postings associated to a term in a `Segment`."],["SpecializedPostingsWriter","The `SpecializedPostingsWriter` is just here to remove dynamic dispatch to the recorder information."],["TFAndPositionRecorder","Recorder encoding term frequencies as well as positions."],["TermFrequencyRecorder","Recorder encoding document ids, and term frequencies"],["TermInfo","`TermInfo` contains all of the information associated to terms in the `.term` file."]],"trait":[["DocSet","Represents an iterable set of sorted doc ids."],["HasLen","Has length trait"],["Postings","Postings (also called inverted list)"],["PostingsWriter","The `PostingsWriter` is in charge of receiving documenting and building a `Segment` in anonymous memory."],["Recorder","Recorder is in charge of recording relevant information about the presence of a term in a document."]]});